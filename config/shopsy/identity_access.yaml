services:

  # Default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false

  # Controller
  App\Shopsy\IdentityAccess\Main\Infrastructure\Delivery\Symfony\Controller\:
    resource: '%kernel.project_dir%/src/Shopsy/IdentityAccess/Main/Infrastructure/Delivery/Symfony/Controller'
    tags: [ 'controller.service_arguments' ]

  App\Shopsy\IdentityAccess\Main\Infrastructure\Delivery\Symfony\Controller\UsersController:
    bind:
      $fileUploader: '@identityAccess.service.fileUploader.awsS3FileUploader'
    tags: [ 'controller.service_arguments' ]

  App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\Repository\:
    resource: '%kernel.project_dir%/src/Shopsy/IdentityAccess/Main/Infrastructure/Domain/Service/Auth/OAuth2/Repository'

  # Repository
  App\Shopsy\IdentityAccess\Main\Infrastructure\Persistence\Doctrine\Identity\DoctrineUserRepository:
    arguments:
      $registry: '@doctrine'
  App\Shopsy\IdentityAccess\Main\Domain\Model\Identity\UserRepository: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Persistence\Doctrine\Identity\DoctrineUserRepository'

  App\Shopsy\IdentityAccess\Main\Infrastructure\Persistence\Doctrine\Auth\DoctrineClientRepository:
    arguments:
      $registry: '@doctrine'
  App\Shopsy\IdentityAccess\Main\Domain\Model\Auth\ClientRepository: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Persistence\Doctrine\Auth\DoctrineClientRepository'

  App\Shopsy\IdentityAccess\Main\Infrastructure\Persistence\Doctrine\Auth\DoctrineAccessTokenRepository:
    arguments:
      $registry: '@doctrine'
  App\Shopsy\IdentityAccess\Main\Domain\Model\Auth\AccessTokenRepository: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Persistence\Doctrine\Auth\DoctrineAccessTokenRepository'

  App\Shopsy\IdentityAccess\Main\Infrastructure\Persistence\Doctrine\Auth\DoctrineRefreshTokenRepository:
    arguments:
      $registry: '@doctrine'
  App\Shopsy\IdentityAccess\Main\Domain\Model\Auth\RefreshTokenRepository: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Persistence\Doctrine\Auth\DoctrineRefreshTokenRepository'

  # Services
  App\Common\Infrastructure\Service\Hasher\BcryptHasher: ~
  App\Common\Infrastructure\Service\Hasher\Hasher: '@App\Common\Infrastructure\Service\Hasher\BcryptHasher'

  App\Shopsy\IdentityAccess\Main\Application\Transformer\DtoUserTransformer: ~
  App\Shopsy\IdentityAccess\Main\Application\Transformer\UserTransformer: '@App\Shopsy\IdentityAccess\Main\Application\Transformer\DtoUserTransformer'

  App\Shopsy\IdentityAccess\Main\Application\Transformer\DtoUserCollectionTransformer: ~
  App\Shopsy\IdentityAccess\Main\Application\Transformer\UserCollectionTransformer: '@App\Shopsy\IdentityAccess\Main\Application\Transformer\DtoUserCollectionTransformer'

  App\Shopsy\IdentityAccess\Main\Application\Transformer\DtoAuthTransformer: ~
  App\Shopsy\IdentityAccess\Main\Application\Transformer\AuthTransformer: '@App\Shopsy\IdentityAccess\Main\Application\Transformer\DtoAuthTransformer'

  App\Shopsy\IdentityAccess\Main\Infrastructure\Persistence\Doctrine\Identity\Query\DoctrineUserQueryFactory: ~
  App\Shopsy\IdentityAccess\Main\Domain\Model\Identity\UserQueryFactory: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Persistence\Doctrine\Identity\Query\DoctrineUserQueryFactory'

  App\Shopsy\IdentityAccess\Main\Application\Command\CreateUserHandler:
    arguments:
      $userRepository: '@App\Shopsy\IdentityAccess\Main\Domain\Model\Identity\UserRepository'
      $hasher: '@App\Common\Infrastructure\Service\Hasher\Hasher'
    tags: [ 'app.command.handler' ]

  App\Shopsy\IdentityAccess\Main\Application\Query\UserQueryHandler:
    arguments:
      $userRepository: '@App\Shopsy\IdentityAccess\Main\Domain\Model\Identity\UserRepository'
      $userQueryFactory: '@App\Shopsy\IdentityAccess\Main\Domain\Model\Identity\UserQueryFactory'
      $userTransformer: '@App\Shopsy\IdentityAccess\Main\Application\Transformer\UserTransformer'
    tags: [ 'app.query.handler' ]

  App\Shopsy\IdentityAccess\Main\Application\Query\UserCollectionQueryHandler:
    arguments:
      $userRepository: '@App\Shopsy\IdentityAccess\Main\Domain\Model\Identity\UserRepository'
      $userQueryFactory: '@App\Shopsy\IdentityAccess\Main\Domain\Model\Identity\UserQueryFactory'
      $userCollectionTransformer: '@App\Shopsy\IdentityAccess\Main\Application\Transformer\UserCollectionTransformer'
    tags: [ 'app.query.handler' ]

  App\Shopsy\IdentityAccess\Main\Application\Command\UpdateUserHandler:
    arguments:
      $userRepository: '@App\Shopsy\IdentityAccess\Main\Domain\Model\Identity\UserRepository'
      $hasher: '@App\Common\Infrastructure\Service\Hasher\Hasher'
    tags: [ 'app.command.handler' ]

  App\Shopsy\IdentityAccess\Main\Application\Command\DestroyUserHandler:
    arguments:
      $userRepository: '@App\Shopsy\IdentityAccess\Main\Domain\Model\Identity\UserRepository'
    tags: [ 'app.command.handler' ]

  App\Shopsy\IdentityAccess\Main\Application\Command\AuthUserHandler:
    arguments:
      $authenticationResponseTransformer: '@App\Shopsy\IdentityAccess\Main\Application\Transformer\AuthTransformer'
      $authentication: '@App\Shopsy\IdentityAccess\Main\Domain\Service\Identity\Authentication'
    tags: [ 'app.command.handler' ]

  # League OAuth2 Server
  App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\:
    namespace: App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\
    resource: '%app.resources.identity_access%/Main/Infrastructure/Domain/Service/Auth/OAuth2'

  identityAccess.league.oauth2.server.privateCryptKey:
    class: League\OAuth2\Server\CryptKey
    arguments:
      $keyPath: '%env(OAUTH2_PRIVATE_KEY)%'
      $passPhrase: null
      $keyPermissionsCheck: false

  identityAccess.league.oauth2.server.publicCryptKey:
    class: League\OAuth2\Server\CryptKey
    arguments:
      $keyPath: '%env(OAUTH2_PUBLIC_KEY)%'
      $passPhrase: null
      $keyPermissionsCheck: false

  identityAccess.league.oauth2.server.grant.passwordGrant:
    class: League\OAuth2\Server\Grant\PasswordGrant
    arguments:
      $userRepository: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\Repository\UserRepository'
      $refreshTokenRepository: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\Repository\RefreshTokenRepository'

  identityAccess.league.oauth2.server.grant.refreshTokenGrant:
    class: League\OAuth2\Server\Grant\RefreshTokenGrant
    arguments:
      $refreshTokenRepository: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\Repository\RefreshTokenRepository'

  League\OAuth2\Server\AuthorizationServer:
    class: League\OAuth2\Server\AuthorizationServer
    arguments:
      $clientRepository: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\Repository\ClientRepository'
      $accessTokenRepository: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\Repository\AccessTokenRepository'
      $scopeRepository: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\Repository\ScopeRepository'
      $privateKey: '@identityAccess.league.oauth2.server.privateCryptKey'
      $encryptionKey: '%env(OAUTH2_ENCRYPTION_KEY)%'
    calls:
      - enableGrantType: [ '@identityAccess.league.oauth2.server.grant.passwordGrant' ]
      - enableGrantType: [ '@identityAccess.league.oauth2.server.grant.refreshTokenGrant' ]

  League\OAuth2\Server\ResourceServer:
    class: League\OAuth2\Server\ResourceServer
    arguments:
      $accessTokenRepository: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\Repository\AccessTokenRepository'
      $publicKey: '@identityAccess.league.oauth2.server.publicCryptKey'

  App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\OAuth2Authentication:
    arguments:
      $clientRepository: '@App\Shopsy\IdentityAccess\Main\Domain\Model\Auth\ClientRepository'
      $serverConfiguration: '@App\Common\Infrastructure\ServerConfiguration'
      $authorizationServer: '@League\OAuth2\Server\AuthorizationServer'
  App\Shopsy\IdentityAccess\Main\Domain\Service\Identity\Authentication: '@App\Shopsy\IdentityAccess\Main\Infrastructure\Domain\Service\Auth\OAuth2\OAuth2Authentication'

  # Test
  App\Shopsy\IdentityAccess\Test\Infrastructure\Persistence\Doctrine\Identity\DataFixtures\UserFixtures:
    arguments:
      $userRepository: '@App\Shopsy\IdentityAccess\Main\Domain\Model\Identity\UserRepository'
      $hasher: '@App\Common\Infrastructure\Service\Hasher\Hasher'
    tags: [ 'doctrine.fixture.orm' ]

  App\Shopsy\IdentityAccess\Test\Infrastructure\Persistence\Doctrine\Auth\DataFixtures\ClientFixtures:
    arguments:
      $clientRepository: '@App\Shopsy\IdentityAccess\Main\Domain\Model\Auth\ClientRepository'
      $hasher: '@App\Common\Infrastructure\Service\Hasher\Hasher'
      $serverConfiguration: '@App\Common\Infrastructure\ServerConfiguration'
    tags: [ 'doctrine.fixture.orm' ]

  # Security
  App\Shopsy\IdentityAccess\Main\Infrastructure\Delivery\Symfony\Security\SecurityUserProvider:
    arguments:
      $userRepository: '@App\Shopsy\IdentityAccess\Main\Domain\Model\Identity\UserRepository'

  App\Shopsy\IdentityAccess\Main\Infrastructure\Delivery\Symfony\Security\OAuth2Authenticator: ~

  #Filesystem
  identityAccess.aws.s3.client:
    class: Aws\S3\S3Client
    arguments:
       - {credentials: {key: '%env(APP_IDENTITY_ACCESS_AWS_ACCESS_KEY_ID)%', secret: '%env(APP_IDENTITY_ACCESS_AWS_SECRET_ACCESS_KEY)%'}, region: '%env(APP_AWS_REGION)%', version: '%env(APP_AWS_VERSION)%', scheme: '%env(APP_AWS_SCHEME)%', endpoint: '%env(APP_AWS_ENDPOINT)%', use_path_style_endpoint: '%env(bool:APP_AWS_USE_PATH_STYLE_ENDPOINT)%' }

  identityAccess.league.flysystem.adapter.aws.s3:
    class: League\Flysystem\AwsS3V3\AwsS3V3Adapter
    arguments:
      $client: '@identityAccess.aws.s3.client'
      $bucket: '%env(APP_IDENTITY_ACCESS_AWS_BUCKET_NAME)%'
    public: false

  identityAccess.league.flysystem.s3:
    class: League\Flysystem\Filesystem
    arguments:
      $adapter: '@identityAccess.league.flysystem.adapter.aws.s3'

  identityAccess.service.fileUploader.awsS3FileUploader:
    class: App\Common\Infrastructure\Service\FileUploader\AwsS3FileUploader
    arguments:
      $filesystem: '@identityAccess.league.flysystem.s3'