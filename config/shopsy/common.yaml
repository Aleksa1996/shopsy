services:

  # Default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false

  # Controller
  App\Common\Infrastructure\Delivery\Symfony\Controller\IndexController:
    class: App\Common\Infrastructure\Delivery\Symfony\Controller\IndexController
    tags: [ 'controller.service_arguments' ]

  # Server Configuration
  App\Common\Infrastructure\ServerConfiguration:
    class: App\Common\Infrastructure\ServerConfiguration
    public: true

  # Command Bus
  App\Common\Application\Bus\Command\Middleware\HandlerMiddleware:
    tags:
      - { name: 'app.command.middleware', priority: 1 }

  App\Common\Application\Bus\Command\Middleware\TransactionalMiddleware:
    arguments:
      $transactionalSession: '@App\Common\Infrastructure\Application\Command\TransactionalSession'
    tags:
      - { name: 'app.command.middleware', priority: 2 }

  App\Common\Application\Bus\Command\Middleware\LoggingMiddleware:
    tags:
      - { name: 'app.command.middleware', priority: 3 }

  App\Common\Application\Bus\Command\Middleware\ExceptionHandlingMiddleware:
    arguments:
      $exceptionHandler: '@App\Common\Application\Command\CommandExceptionHandler'
    tags:
      - { name: 'app.command.middleware', priority: 4 }

  App\Common\Application\Command\CommandExceptionHandler: ~

  App\Common\Application\Bus\Command\CommandBus:
    arguments:
      - !tagged_iterator app.command.middleware

  # Query Bus
  App\Common\Application\Bus\Query\QueryBus: ~

  # Domain events
  App\Common\Domain\Event\DomainEventPublisher:
    factory: [ 'App\Common\Domain\Event\DomainEventPublisher', 'instance' ]
    public: true

  App\Common\Domain\Event\PersistDomainEventSubscriber:
    arguments:
      $storedDomainEventRepository: '@App\Common\Domain\Event\StoredDomainEventRepository'
    tags: [ 'app.domain.event.subscriber' ]
    public: true

  # Repository
  App\Common\Infrastructure\Persistence\Doctrine\Event\DoctrineStoredDomainEventRepository:
    arguments:
      $registry: '@doctrine'
  App\Common\Domain\Event\StoredDomainEventRepository: '@App\Common\Infrastructure\Persistence\Doctrine\Event\DoctrineStoredDomainEventRepository'

  # Facade
  App\Common\Domain\Event\Facade\DomainEventPublisher: ~

  # Transactional session
  App\Common\Infrastructure\Application\Command\DoctrineSession:
    arguments:
      $entityManager: '@doctrine.orm.entity_manager'
  App\Common\Infrastructure\Application\Command\TransactionalSession: '@App\Common\Infrastructure\Application\Command\DoctrineSession'

  # Param Converter
  App\Common\Infrastructure\Delivery\Symfony\ParamConverter\:
    resource: '%kernel.project_dir%/src/Common/Infrastructure/Delivery/Symfony/ParamConverter'
    tags: [ 'request.param_converter' ]

  # Serializer
  App\Common\Infrastructure\Delivery\Symfony\Serializer\Api\JsonApiNormalizer:
    arguments:
      $serverConfiguration: '@App\Common\Infrastructure\ServerConfiguration'
      $jsonApiDtoNormalizer: '@App\Common\Infrastructure\Delivery\Symfony\Serializer\Api\JsonApiDtoNormalizer'
    tags:
      - {name: 'serializer.normalizer', priority: 21}

  App\Common\Infrastructure\Delivery\Symfony\Serializer\Api\JsonApiDtoNormalizer:
    arguments:
      $serverConfiguration: '@App\Common\Infrastructure\ServerConfiguration'
      $objectNormalizer: '@serializer.normalizer.object'
    tags:
      - {name: 'serializer.normalizer', priority: 20}

  App\Common\Infrastructure\Delivery\Symfony\Serializer\Api\JsonApiErrorNormalizer:
    tags: [ 'serializer.normalizer' ]

  # Common Infrastructure Service
  App\Common\Infrastructure\Service\Hasher\BcryptHasher: ~
  App\Common\Infrastructure\Service\Hasher\Hasher: '@App\Common\Infrastructure\Service\Hasher\BcryptHasher'

  # Filesystem
  league.flysystem.adapter.local:
    class: League\Flysystem\Local\LocalFilesystemAdapter
    arguments:
      $location: '%kernel.project_dir%/public'
    public: false

  league.flysystem.local:
    class: League\Flysystem\Filesystem
    arguments:
      $adapter: '@league.flysystem.adapter.local'

  League\Flysystem\Filesystem: '@league.flysystem.local'

  app.common.infrastructure.service.fileUploader.localFileUploader:
    class: App\Common\Infrastructure\Service\FileUploader\LocalFileUploader
    arguments:
      $filesystem: '@league.flysystem.local'

  App\Common\Infrastructure\Service\FileUploader\FileUploader: '@app.common.infrastructure.service.fileUploader.localFileUploader'