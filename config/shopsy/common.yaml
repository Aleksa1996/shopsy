services:

  # Default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false

  App\Common\Infrastructure\ServerConfiguration:
    arguments:
      $kernelProjectDir: '%kernel.project_dir%'
      $appSecret: '%env(APP_SECRET)%'
      $appHostname: '%env(APP_HOSTNAME)%'
      $appSSLEnabled: '%env(bool:APP_SSL_ENABLED)%'
    public: true

  # Command Bus
  App\Common\Application\Bus\Command\Middleware\HandlerMiddleware:
    tags:
      - { name: 'app.command.middleware', priority: 1 }

  App\Common\Application\Bus\Command\Middleware\TransactionalMiddleware:
    arguments:
      $transactionalSession: '@App\Common\Infrastructure\Application\Command\TransactionalSession'
    tags:
      - { name: 'app.command.middleware', priority: 2 }

  App\Common\Application\Bus\Command\Middleware\LoggingMiddleware:
    tags:
      - { name: 'app.command.middleware', priority: 3 }

  App\Common\Application\Bus\Command\Middleware\ExceptionHandlingMiddleware:
    arguments:
      $exceptionHandler: '@App\Common\Application\Command\CommandExceptionHandler'
    tags:
      - { name: 'app.command.middleware', priority: 4 }

  App\Common\Application\Command\CommandExceptionHandler: ~

  App\Common\Application\Bus\Command\CommandBus:
    arguments:
      - !tagged_iterator app.command.middleware

  # Query Bus
  App\Common\Application\Bus\Query\QueryBus: ~

  # Domain events
  App\Common\Domain\Event\DomainEventPublisher:
    factory: [ 'App\Common\Domain\Event\DomainEventPublisher', 'instance' ]
    public: true

  App\Common\Domain\Event\LoggerEventSubscriber:
    tags: [ 'app.domain.event.subscriber' ]

  # Transactional session
  App\Common\Infrastructure\Application\Command\DoctrineSession:
    arguments:
      $entityManager: '@doctrine.orm.entity_manager'
  App\Common\Infrastructure\Application\Command\TransactionalSession: '@App\Common\Infrastructure\Application\Command\DoctrineSession'

  # Param Converter
  App\Common\Infrastructure\Delivery\Symfony\ParamConverter\:
    resource: '%kernel.project_dir%/src/Common/Infrastructure/Delivery/Symfony/ParamConverter'
    tags: [ 'request.param_converter' ]

  # Serializer
  App\Common\Infrastructure\Delivery\Symfony\Serializer\Api\JsonApiDtoNormalizer:
    arguments:
      $serverConfiguration: '@App\Common\Infrastructure\ServerConfiguration'
      $objectNormalizer: '@serializer.normalizer.object'
    tags:
      - {name: 'serializer.normalizer', priority: 20}

  App\Common\Infrastructure\Delivery\Symfony\Serializer\Api\JsonApiNormalizer:
    arguments:
      $serverConfiguration: '@App\Common\Infrastructure\ServerConfiguration'
      $jsonApiDtoNormalizer: '@App\Common\Infrastructure\Delivery\Symfony\Serializer\Api\JsonApiDtoNormalizer'
    tags:
      - {name: 'serializer.normalizer', priority: 21}

  App\Common\Infrastructure\Delivery\Symfony\Serializer\Api\JsonApiErrorNormalizer:
    tags: [ 'serializer.normalizer' ]

# Flysystem
  flysystem.adapter.local:
    class: League\Flysystem\Local\LocalFilesystemAdapter
    arguments:
      $location: '%kernel.project_dir%/public'
    public: false

  aws.s3.client:
    class: Aws\S3\S3Client
    arguments:
       - {
          credentials: false,
          region: '%env(APP_AWS_REGION)%',
          version: '%env(APP_AWS_VERSION)%',
          scheme: '%env(APP_AWS_SCHEME)%',
          endpoint: '%env(APP_AWS_ENDPOINT)%',
          use_path_style_endpoint: '%env(bool:APP_AWS_USE_PATH_STYLE_ENDPOINT)%'
        }

  flysystem.adapter.s3:
    class: League\Flysystem\AwsS3V3\AwsS3V3Adapter
    arguments:
      $client: '@aws.s3.client'
      $bucket: '%env(APP_AWS_BUCKET)%'
    public: false

  flysystem.local:
    class: League\Flysystem\Filesystem
    arguments:
      $adapter: '@flysystem.adapter.local'

  flysystem.s3:
    class: League\Flysystem\Filesystem
    arguments:
      $adapter: '@flysystem.adapter.s3'

  League\Flysystem\Filesystem: '@flysystem.s3'

  app.common.infrastructure.service.fileUploader.awsS3FileUploader:
    class: App\Common\Infrastructure\Service\FileUploader\AwsS3FileUploader
    arguments:
      $filesystem: '@flysystem.s3'

  App\Common\Infrastructure\Service\FileUploader\FileUploader: '@app.common.infrastructure.service.fileUploader.awsS3FileUploader'